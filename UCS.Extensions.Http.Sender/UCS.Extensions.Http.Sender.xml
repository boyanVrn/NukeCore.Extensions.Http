<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UCS.Extensions.Http.Sender</name>
    </assembly>
    <members>
        <member name="T:UCS.Extensions.Http.Sender.HttpSender">
            <summary>
            http sander base class
            </summary>
        </member>
        <member name="P:UCS.Extensions.Http.Sender.HttpSender.Client">
            <summary>
            injected http client
            </summary>
        </member>
        <member name="M:UCS.Extensions.Http.Sender.HttpSender.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            constructor, create new instance of HttpSender
            </summary>
            <param name="client">System.Net.Http.HttpClient</param>
            <param name="logger">Microsoft.Extensions.Logging.ILogger</param>
        </member>
        <member name="M:UCS.Extensions.Http.Sender.HttpSender.CheckResponseStatusCode(System.Net.Http.HttpResponseMessage)">
            <summary>
            validate http code in responce, in base valid only 200
            </summary>
            <param name="src"></param>
            <returns></returns>
            <exception cref="T:UCS.Extensions.Http.Errors.HttpExc"></exception>
        </member>
        <member name="M:UCS.Extensions.Http.Sender.HttpSender.HasErrorInResponseBody(System.String,System.String@)">
            <summary>
            validate responce bode, if contains 'error' field return true
            </summary>
            <param name="body">responce body</param>
            <param name="errText">error description</param>
            <returns>true or false</returns>
        </member>
        <member name="M:UCS.Extensions.Http.Sender.HttpSender.SendHttpRequest(System.Net.Http.HttpMethod,System.String,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:UCS.Extensions.Http.Sender.HttpSender.SendHttpRequest``1(System.Net.Http.HttpMethod,System.String,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:UCS.Extensions.Http.Sender.HttpSender.SendHttpRequest``1(System.Net.Http.HttpMethod,System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:UCS.Extensions.Http.Sender.HttpSender.SendHttpRequest``2(System.Net.Http.HttpMethod,System.String,``0,System.Action{UCS.Extensions.Http.Sender.HttpSenderOptions,UCS.Extensions.Http.Models.Additional.CustomHttpHeaders},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:UCS.Extensions.Http.Sender.HttpSender.SendHttpRequest``1(System.Net.Http.HttpMethod,System.String,System.Net.Http.HttpContent,UCS.Extensions.Http.Models.Additional.CustomHttpHeaders,UCS.Extensions.Http.Sender.HttpSenderOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:UCS.Extensions.Http.Sender.IHttpSender">
            <summary>
            http sender methods interface
            </summary>
        </member>
        <member name="M:UCS.Extensions.Http.Sender.IHttpSender.SendHttpRequest(System.Net.Http.HttpMethod,System.String,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            use in case when request body exists, but response body no needed
            </summary>
            <param name="requestType">request type</param>
            <param name="apiMethod">url path</param>
            <param name="postedData">request body</param>
            <param name="validateResponse">if set then check response by HasErrorInResponseBody method</param>
            <param name="cancel">cancel query token</param>
            <returns>void or exception</returns>
        </member>
        <member name="M:UCS.Extensions.Http.Sender.IHttpSender.SendHttpRequest``1(System.Net.Http.HttpMethod,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            use in case when request body is not exists, but response body is needed
            </summary>
            <param name="requestType">request type</param>
            <param name="apiMethod">url path</param>
            <param name="validateResponse">if set then check response by HasErrorInResponseBody method</param>
            <param name="cancel">cancel query token</param>
            <typeparam name="T">responce deserialize type</typeparam>
            <returns>class or exception</returns>
        </member>
        <member name="M:UCS.Extensions.Http.Sender.IHttpSender.SendHttpRequest``1(System.Net.Http.HttpMethod,System.String,System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            use in case when request body exists, and response body needed too
            </summary>
            <param name="requestType">request type</param>
            <param name="apiMethod">url path</param>
            <param name="postedData">request body</param>
            <param name="validateResponse">if set then check response by HasErrorInResponseBody method</param>
            <param name="cancel">cancel query token</param>
            <typeparam name="T">responce deserialize type</typeparam>
            <returns>class or exception</returns>
        </member>
        <member name="M:UCS.Extensions.Http.Sender.IHttpSender.SendHttpRequest``2(System.Net.Http.HttpMethod,System.String,``0,System.Action{UCS.Extensions.Http.Sender.HttpSenderOptions,UCS.Extensions.Http.Models.Additional.CustomHttpHeaders},System.Threading.CancellationToken)">
            <summary>
            base extended http send method. use then need flex custom tuning
            </summary>
            <param name="requestType">request type</param>
            <param name="apiMethod"></param>
            <param name="body">url path</param>
            <param name="cfgAction">params configuring action</param>
            <param name="cancel">cancel query token</param>
            <typeparam name="TReq">request serialization type</typeparam>
            <typeparam name="TResp">responce deserialize type</typeparam>
            <returns>class or exception</returns>
        </member>
        <member name="M:UCS.Extensions.Http.Sender.IHttpSender.SendHttpRequest``1(System.Net.Http.HttpMethod,System.String,System.Net.Http.HttpContent,UCS.Extensions.Http.Models.Additional.CustomHttpHeaders,UCS.Extensions.Http.Sender.HttpSenderOptions,System.Threading.CancellationToken)">
            <summary>
            base extended http send method. use then need flex custom tuning
            </summary>
            <param name="requestType"></param>
            <param name="apiMethod"></param>
            <param name="content"></param>
            <param name="headers"></param>
            <param name="options"></param>
            <param name="cancel"></param>
            <typeparam name="TResp"></typeparam>
            <returns></returns>
        </member>
    </members>
</doc>
